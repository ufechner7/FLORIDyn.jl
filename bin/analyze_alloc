#!/bin/bash
# Copyright (c) 2025 Marcus Becker, Uwe Fechner
# SPDX-License-Identifier: BSD-3-Clause

# Analyze memory allocation tracking files (.mem files) and list highest allocations
# This script parses .mem files generated by Julia's --track-allocation flag

# Change to repo root if running from bin directory
if [[ $(basename $(pwd)) == "bin" ]]; then
    cd ..
fi

# Check if .mem files exist
mem_count=$(find . -name "*.mem" -type f | wc -l)

if [ "$mem_count" -eq 0 ]; then
    echo "No .mem files found."
    echo "Run './bin/test_alloc' first to generate allocation data."
    exit 1
fi

echo "Found $mem_count .mem files"
echo "Analyzing memory allocations..."
echo ""

# Default number of top allocations to show
TOP_N=${1:-20}

echo "=== TOP $TOP_N MEMORY ALLOCATIONS ==="
echo ""

# Find all lines with allocations, sort by allocation size (descending)
# Format: filename:line_number:allocation_bytes:source_code
find . -name "*.mem" -exec grep -Hn "^[[:space:]]*[0-9]" {} \; | \
    sed 's/:/ /' | \
    awk '{
        # Extract allocation number (first number on the line)
        match($0, /[0-9]+/, arr)
        if (arr[0] > 0) {
            # Get filename without .mem extension and line number
            gsub(/\.mem$/, "", $1)
            # Print: allocation_bytes filename:line_number rest_of_line
            printf "%s %s:%s", arr[0], $1, $2
            # Print the rest of the line (source code)
            for(i=3; i<=NF; i++) printf " %s", $i
            printf "\n"
        }
    }' | \
    sort -nr | \
    head -n "$TOP_N" | \
    awk '{
        bytes = $1
        file_line = $2
        # Convert bytes to human readable format
        if (bytes >= 1048576) {
            size = sprintf("%.2f MB", bytes/1048576)
        } else if (bytes >= 1024) {
            size = sprintf("%.2f KB", bytes/1024)
        } else {
            size = sprintf("%s B", bytes)
        }
        
        printf "%-12s %s", size, file_line
        # Print the rest (source code)
        for(i=3; i<=NF; i++) printf " %s", $i
        printf "\n"
    }'

echo ""
echo "=== ALLOCATION SUMMARY BY FILE ==="
echo ""

# Summary by file
find . -name "*.mem" -exec grep -H "^[[:space:]]*[0-9]" {} \; | \
    sed 's/:/ /' | \
    awk '{
        match($0, /[0-9]+/, arr)
        if (arr[0] > 0) {
            gsub(/\.mem$/, "", $1)
            file_total[$1] += arr[0]
            file_count[$1]++
        }
    }
    END {
        for (file in file_total) {
            if (file_total[file] >= 1048576) {
                size = sprintf("%.2f MB", file_total[file]/1048576)
            } else if (file_total[file] >= 1024) {
                size = sprintf("%.2f KB", file_total[file]/1024)
            } else {
                size = sprintf("%s B", file_total[file])
            }
            printf "%-12s %-4s lines %s\n", size, file_count[file], file
        }
    }' | sort -nr

echo ""
echo "=== USAGE ==="
echo "To see more/fewer top allocations: $0 [number]"
echo "Example: $0 50    # Show top 50 allocations"
echo "To clean up .mem files: ./bin/clean_mem_files"
echo ""
echo "=== TIPS ==="
echo "• Focus on allocations > 1KB for optimization"
echo "• Look for allocations in tight loops"
echo "• Check if temporary arrays can be pre-allocated"
echo "• Use @views to avoid array copying"
