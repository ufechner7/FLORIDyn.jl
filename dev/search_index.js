var documenterSearchIndex = {"docs":
[{"location":"functions/#Exported-Functions","page":"Exported Functions","title":"Exported Functions","text":"","category":"section"},{"location":"functions/#Defining-the-wind-directions","page":"Exported Functions","title":"Defining the wind directions","text":"","category":"section"},{"location":"functions/#FLORIDyn.getWindDirT","page":"Exported Functions","title":"FLORIDyn.getWindDirT","text":"getWindDirT(::Direction_Constant, WindDir, iT, _)\n\nReturn wind direction in SOWFA-degrees for the requested turbine(s).\n\nArguments\n\nWindDir: The wind direction (scalar).\niT: Index or indices of the turbines (can be an integer or vector).\n_: Placeholder for unused argument.\n\nReturns\n\nphi: Array of wind direction values, same size as iT.\n\n\n\n\n\ngetWindDirT(::Direction_Constant_wErrorCov, WindDir::WindDirType, iT)\n\nReturn wind direction in SOWFA-deg for the requested turbine(s).\n\nArguments\n\nWindDir::WindDirType: WindDirType\niT: Vector of turbine indices (can be any indexable collection)\n\nReturns\n\nphi: Vector of wind directions for the selected turbines, including random perturbation\n\n\n\n\n\ngetWindDirT(::Direction_Interpolation, WindDir::Matrix, iT, t)\n\nDirection_Interpolation\n\nReturns the wind direction at the respective turbine(s). Uniform interpolation version - all turbines experience the same changes.\n\nArguments:\n\nWindDir::Matrix: columns are time and phi (wind direction)\niT: single value or vector with turbine index/indices\nt: time of request\n\nReturns:\n\nphi: Vector of wind directions for each turbine in iT\n\n\n\n\n\ngetWindDirT(::Direction_Interpolation_wErrorCov, WindDir::WindDirMatrix, iT, t)\n\nReturns the wind direction at the respective turbine(s). Uniform interpolation version - all turbines experience the same changes.\n\nArguments:\n\nWindDir::WindDirMatrix: WindDirMatrix\niT: single value or vector with turbine index/indices\nt: time of request\n\nReturns:\n\nphi: Vector of wind directions for each turbine in iT\n\n\n\n\n\ngetWindDirT(::Direction_InterpTurbine, WindDir::Matrix, iT, t)\n\nReturn wind direction in SOWFA-degrees for the requested turbine(s).\n\nArguments\n\nWindDir::Matrix: Each row is [time, phi_T0, phi_T1, ...].\n`iT: Index or indices of turbines.\nt: Time of request.\n\nReturns\n\nphi::Vector{Float64}: Wind direction(s) for the selected turbine(s) at time t.\n\n\n\n\n\ngetWindDirT(::Direction_InterpTurbine_wErrorCov, WindDir::WindDirMatrix, iT, t)\n\nReturn wind direction in SOWFA-deg for the requested turbine(s).\n\nArguments\n\nWindDir::WindDirMatrix: See: WindDirMatrix\niT: Index or indices of the turbines (can be integer or vector)\nt: Time of request (Float64)\n\nReturns\n\nphi: Wind direction(s) for requested turbine(s), perturbed with noise.\n\n\n\n\n\ngetWindDirT(::Direction_RW_with_Mean, WindDirNow, WindDir::WindDirTriple)\n\nReturns the wind direction at the respective turbine(s).\n\nArguments\n\nWindDirNow: Current value (vector)\nWindDir::WindDirTriple: WindDirTriple\n\nReturns\n\nphi: Updated wind direction(s) (vector)\n\n\n\n\n\n","category":"function"},{"location":"functions/#FLORIDyn.getWindDirT_EnKF","page":"Exported Functions","title":"FLORIDyn.getWindDirT_EnKF","text":"getWindDirT_EnKF(::Direction_EnKF_InterpTurbine, WindDir::Matrix, iT, t)\n\nDirectionEnKFInterpTurbine\n\nReturn wind direction in SOWFA-deg for the requested turbine(s).\n\nArguments\n\nWindDir::Matrix: Matrix where each row is [time, phiT0, phiT1, ... phi_Tn]\niT: Index or indices of the turbines (can be integer or vector)\nt: Time of request (scalar)\n\nReturns\n\nphi: Wind direction(s) at time t for turbine(s) iT\n\n\n\n\n\n","category":"function"},{"location":"functions/#Defining-the-wind-shear","page":"Exported Functions","title":"Defining the wind shear","text":"","category":"section"},{"location":"functions/#FLORIDyn.getWindShearT","page":"Exported Functions","title":"FLORIDyn.getWindShearT","text":"getWindShearT(::Shear_Interpolation, WindShear::AbstractMatrix, z)\n\nCompute the wind shear at a given height z using the specified WindShear model.\n\nArguments\n\n::Shear_Interpolation: (Type only) Use interpolation to determine the wind shear.\nWindShear: A matrix describing the wind shear profile.\nz: The height (in meters) at which to evaluate the wind shear.\n\nReturns\n\nThe wind shear value at height z.\n\nREMARKS\n\nExpects a .csv file called \"WindShearProfile.csv\" with a normalized wind speed profile for different heights:\n\nz, (u_z/u0)\nz, (u_z/u0)\nz, (u_z/u0)\n\nThere is a linear interpolation between every pair. In case z is out of bounds the function will use the closest available setpoint.\n\n\n\n\n\ngetWindShearT(::Shear_PowerLaw, WindShear, z_norm)\n\nReturn the shear factor u_eff = shear * u_referenceHeight using the power law.\n\nArguments\n\nShear_PowerLaw: (type only, unused) Specifies that this method applies to the power law model\nWindShear: A struct of type (WindShear)(@ref)\nz0: Reference height (not used in this function)\nalpha: WindShear coefficient\nz_norm: Height(s) (can be scalar or array)\n\nReturns\n\nshear: The shear factor at the given height(s)\n\n\n\n\n\n","category":"function"},{"location":"functions/#Defining-the-wind-turbulence","page":"Exported Functions","title":"Defining the wind turbulence","text":"","category":"section"},{"location":"functions/#FLORIDyn.getWindTiT","page":"Exported Functions","title":"FLORIDyn.getWindTiT","text":"getWindTiT(::TI_Constant, WindTi, iT, _)\n\nReturn turbulence intensity for the requested turbine(s).\n\nArguments\n\n::TI_Constant: type parameter to indicate constant wind turbulence\nWindTi: Constant value (turbulence intensity)\niT: Index or indices of the turbines\n_: will be ignored\n\nReturns\n\nTi: Array of turbulence intensity values for each turbine index\n\n\n\n\n\ngetWindTiT(::TI_Interpolation, WindTi::Matrix, iT, t)\n\nInterpolates the wind turbulence intensity (TI) at a given time t using the specified TI_Interpolation method.\n\nArguments\n\n::TI_Interpolation: Use linear interpolation to calculate the turbulence intensity.\nWindTi::Matrix: Matrix containing wind turbulence intensity values over time.\niT: Index/indices of the turbines (can be Int or array).\nt: The specific time at which to interpolate the turbulence intensity.\n\nReturns\n\nThe interpolated turbulence for the requested turbine(s) at time t.\n\nNotes\n\nThe function assumes that WindTi contains the necessary data for interpolation as (time, TI) pairs (n×2 matrix)\nUniform interpolation version - all turbines experience the same changes.\n\n\n\n\n\ngetWindTiT(::TI_InterpTurbine, WindTi, iT, t)\n\nRetrieve the wind turbulence intensity (TI) for a specific turbine at a given time.\n\nArguments\n\n::TI_InterpTurbine: The turbulence intensity interpolation object for the turbine.\nWindTi: Array or data structure containing wind turbulence intensity values.\niT: Index of the turbine for which the TI is requested.\nt: Time at which the TI value is needed.\n\nReturns\n\nThe interpolated wind turbulence intensity value for the specified turbine at time t.\n\n\n\n\n\n","category":"function"},{"location":"functions/#FLORIDyn.getWindTiT_EnKF","page":"Exported Functions","title":"FLORIDyn.getWindTiT_EnKF","text":"getWindTiT_EnKF(::TI_EnKF_InterpTurbine, WindTi, iT, t)\n\nReturn turbulence intensity for the requested turbine(s) at time t.\n\nArguments\n\n::TI_EnKF_InterpTurbine: type parameter to indicate Individual Turbine value implementation\nWindTi: Matrix where each row is [time, TIT0, TIT1, ... TI_Tn]\niT: Index or indices of the turbines (1-based)\nt: Time of request\n\nReturns\n\nTi: Turbulence intensity for the requested turbines at time t\n\n\n\n\n\n","category":"function"},{"location":"functions/#FLORIS","page":"Exported Functions","title":"FLORIS","text":"","category":"section"},{"location":"functions/#FLORIDyn.calcCt","page":"Exported Functions","title":"FLORIDyn.calcCt","text":"calcCt(a, _)\n\nCalculate the thrust coefficient (Ct) for a wind turbine based on the axial induction factor a.\n\nArguments\n\na::Number: Axial induction factor, typically between 0 and 0.5.\n_: unused parameter\n\nReturns\n\nCt::Number: The calculated thrust coefficient.\n\n\n\n\n\n","category":"function"},{"location":"functions/#FLORIDyn.centerline","page":"Exported Functions","title":"FLORIDyn.centerline","text":"centerline(States_OP, States_T, States_WF, paramFLORIS, D)\n\nCompute the centerline wake properties for a wind farm simulation.\n\nArguments\n\nStates_OP: Operational states of the turbines (e.g., yaw, pitch, etc.).\nStates_T: Turbine-specific states (e.g., rotor speed, torque, etc.).\nStates_WF: Wind farm-level states (e.g., wind direction, wind speed, etc.).\nparamFLORIS: Parameters for the FLORIS wake model.\nD: Rotor diameter or characteristic length scale.\n\nReturns\n\nThe computed centerline wake properties delta, which includes the deflection in the y and z directions.\n\nNotes\n\nThis function is part of the Gaussian wake model implementation for wind farm simulations using the FLORIDyn.jl package.\n\n\n\n\n\n","category":"function"},{"location":"functions/#FLORIDyn.discretizeRotor","page":"Exported Functions","title":"FLORIDyn.discretizeRotor","text":"discretizeRotor(nRP::Int)\n\nDiscretizes the rotor into a nRP segments. The algorithm returns the normalized center location ∈ [-0.5, 0.5] and the relative area the segment represents.\n\nArguments\n\nnRP::Int: The number of radial points to discretize the rotor into.\n\nReturns\n\nThe tuple (RPs, w) where:\nRPs: A matrix of size (nC, 3) where nC is the number of segments. The first column is all zeros,   the second and third columns contain the normalized radial positions.\nw: A vector of weights corresponding to each segment, summing to approximately 1.\n\nNotes\n\nThe algorithm returns the normalized center location in the range [-0.5, 0.5] and the relative area that each segment represents.\nThe isocell algorithm is used, which may not yield exactly nRP cells but aims to achieve a similar number.\nFor details, see the publication by Masset et al.: Masset et al. (2009)\nThe choice of N1 = 3 is made here, but values of 4 or 5 are also viable options. The choice of 3 is close to optimal.\n\n\n\n\n\n","category":"function"},{"location":"functions/#FLORIDyn.getVars","page":"Exported Functions","title":"FLORIDyn.getVars","text":"getVars(RPs, a, C_T, yaw, TI, TI0, param, D)\n\nCompute and return variables related to the Gaussian wake model for wind turbines.\n\nIn particular, it calculates the field width, the potential core data and the deflection. These values are needed for the calculation of the wake shape and speed  reduction. The values are based of the state of every individual OP.\n\nArguments\n\nRPs: Array or collection of reference points where the variables are evaluated.\na: Axial induction factor(s) for the turbine(s).\nC_T: Thrust coefficient(s) for the turbine(s).\nyaw: Yaw angle(s) of the turbine(s) in radians or degrees.\nTI: Turbulence intensity at the reference points.\nTI0: Ambient turbulence intensity.\nparam: Model parameters, possibly a struct or dictionary containing Gaussian wake model parameters.\nD: Rotor diameter(s) of the turbine(s).\n\nReturns\n\nReturns the tuple\n\nsig_y::Vector: Gaussian variance in y direction (sqrt of)\nsig_z::Vector: Gaussian variance in z direction (sqrt of)\nC_T: Thrust coefficient, same as OP.Ct\nx_0: Potential core length\ndelta: Deflection\npc_y: Potential core boundary in y dir\npc_z: Potential core boundary in z dir\n\nSOURCES\n\n[1] Experimental and theoretical study of wind turbine wakes in yawed conditions - M. Bastankhah and F. Porté-Agel\n[2] Design and analysis of a spatially heterogeneous wake - A. Farrell, J. King et al.\n\n\n\n\n\n","category":"function"},{"location":"functions/#FLORIDyn","page":"Exported Functions","title":"FLORIDyn","text":"","category":"section"},{"location":"functions/#FLORIDyn.prepareSimulation","page":"Exported Functions","title":"FLORIDyn.prepareSimulation","text":"prepareSimulation(set::Settings, wind, con, paramFLORIDyn, paramFLORIS, turbProp, sim)\n\nPrepares the simulation environment for a wind farm analysis using the provided settings and parameters.\n\nArguments\n\nset::Settings: Simulation settings containing configuration options.\nwind: Wind conditions or wind field data required for the simulation.\ncon: Controller or control parameters for the turbines.\nparamFLORIDyn: Parameters specific to the FLORIDyn model.\nparamFLORIS: Parameters specific to the FLORIS model.\nturbProp: Properties of the turbines involved in the simulation.\nsim: Simulation-specific parameters or state.\n\nArguments that get modified\n\nwind: Updated with wind velocity, direction, turbulence intensity, and shear profile.\ncon: Updated with yaw data.\nsim: Updated with the number of simulation steps.\nparamFLORIS: May include additional parameters for the FLORIS model.\n\nReturns\n\nReturns the tuple (T, wind, sim, con, paramFLORIS) where:\nT: Dictionary containing turbine states and positions.\nwind: Updated wind conditions.\nsim: Updated simulation parameters.\ncon: Updated controller parameters.\nparamFLORIS: Parameters for the FLORIS model.\n\n\n\n\n\n","category":"function"},{"location":"functions/#FLORIDyn.runFLORIDyn","page":"Exported Functions","title":"FLORIDyn.runFLORIDyn","text":"runFLORIDyn(set::Settings, T::WindFarm, wind::Wind, Sim, Con, paramFLORIDyn, paramFLORIS)\n\nMain entry point for the FLORIDyn closed-loop simulation.\n\nArguments\n\nset::Settings: Simulation settings and configuration parameters.\nT::WindFarm: See: WindFarm simulation state, including turbine and wind farm states.\nwind::Wind: See: Wind field settings.\nSim: Simulation state or configuration object.\nCon: Controller object or control parameters.\nparamFLORIDyn: Parameters specific to the FLORIDyn model.\nparamFLORIS: Parameters specific to the FLORIS model.\n\nReturns\n\nSimulation results, including turbine states, control actions, and performance metrics.\n\nDescription\n\nRuns a closed-loop wind farm simulation using the FLORIDyn and FLORIS models,  applying control strategies and updating turbine states over time.\n\n\n\n\n\n","category":"function"},{"location":"settings/#Simulation-settings","page":"Settings","title":"Simulation settings","text":"","category":"section"},{"location":"settings/#Introduction","page":"Settings","title":"Introduction","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"The settings are defined in a .yaml file in the folder data. The function setup converts them  into three settings structs, containing strings and numbers. The constructor Settings creates a struct of marker types from these settings structs. ","category":"page"},{"location":"settings/#Abstract-types","page":"Settings","title":"Abstract types","text":"","category":"section"},{"location":"settings/#FLORIDyn.VelModel","page":"Settings","title":"FLORIDyn.VelModel","text":"VelModel\n\nAbstract type representing a velocity model in the wind field module. Subtypes of VelModel implement specific velocity field representations or models.\n\nSee also: \n\nMarkers defining the wind velocity model for more details.\n\n\n\n\n\n","category":"type"},{"location":"settings/#FLORIDyn.DirModel","page":"Settings","title":"FLORIDyn.DirModel","text":"DirModel\n\nAn abstract type representing a directional wind field model.  Subtypes of DirModel should implement specific models for wind directionality.\n\nSee: Markers defining the wind direction model for more details.\n\n\n\n\n\n","category":"type"},{"location":"settings/#FLORIDyn.TurbulenceModel","page":"Settings","title":"FLORIDyn.TurbulenceModel","text":"TurbulenceModel\n\nAn abstract type representing a turbulence model for wind field calculations. Subtypes of TurbulenceModel should implement specific models for wind turbulence intensity.\n\nSee: Markers for defining the wind turbulence for more details.\n\n\n\n\n\n","category":"type"},{"location":"settings/#FLORIDyn.ControllerModel","page":"Settings","title":"FLORIDyn.ControllerModel","text":"ControllerModel\n\nAn abstract type representing a controller model for wind turbines. Subtypes of ControllerModel should implement specific control strategies for turbine operation.\n\nSee: Markers defining the controller for more details.\n\n\n\n\n\n","category":"type"},{"location":"settings/#Types-created-from-the-yaml-file","page":"Settings","title":"Types created from the yaml file","text":"","category":"section"},{"location":"settings/#FLORIDyn.Sim","page":"Settings","title":"FLORIDyn.Sim","text":"Sim\n\nA mutable struct representing the simulation settings.\n\nFields\n\nfloris::String: The name of the FLORIS model to be used.\nstart_time::Int64: The start time of the simulation in seconds.\nend_time::Int64: The end time of the simulation in seconds.\ntime_step::Int64: The time step for the simulation in seconds.\nsim_step::Union{Nothing, Int64}: Optional simulation step size.\nn_sim_steps::Union{Nothing, Int64}: Optional number of simulation steps.\nrotor_discret::String: The rotor discretization method, e.g., \"Uniform\", \"Gaussian\".\nrotor_points::Int64: The number of rotor points for discretization.\ndyn::Dyn: The dynamic settings for the simulation.\ninit::String: The initialization method, e.g., \"init\", \"load\".\npath_to_data::String: The path to the directory where simulation data is stored.\nsave_init_state::Bool: Whether to save the initial state of the simulation.\nsave_final_state::Bool: Whether to save the final state of the simulation.\n\n\n\n\n\n","category":"type"},{"location":"settings/#FLORIDyn.Wind","page":"Settings","title":"FLORIDyn.Wind","text":"Wind\n\nA mutable struct representing wind settings.\n\nFields\n\ninput_vel::String: The type of wind velocity input, e.g., \"Constant\", \"Interpolation\".\ninput_dir::String: The type of wind direction input, e.g., \"Constant\", \"Interpolation\".\ninput_ti::String: The type of turbulence intensity input, e.g., \"Constant\", \"Interpolation\".\ninput_shear::String: The type of wind shear input, e.g., \"PowerLaw\", \"Interpolation\".\ncorrection::WindCorrection: Settings for wind corrections.\nperturbation::WindPerturbation: Settings for wind perturbations.\nvel::Union{Nothing, Float64}: Optional wind velocity value.\ndir::Union{Nothing, Matrix{Float64}}: Optional wind direction matrix.\nti::Union{Nothing, Float64}: Optional turbulence intensity value.\nshear::Union{Nothing, WindShear}: Optional wind shear profile.\n\n\n\n\n\n","category":"type"},{"location":"settings/#FLORIDyn.Con","page":"Settings","title":"FLORIDyn.Con","text":"Con\n\nA mutable struct for configuration settings.\n\nFields\n\nyaw::String: The yaw control strategy, e.g., \"Constant\", \"Interpolation\".\nyaw_data::Union{Nothing, Matrix{Float64}}: Optional yaw data matrix.\ntanh_yaw::Bool: Whether to use hyperbolic tangent yaw control.\n\n\n\n\n\n","category":"type"},{"location":"settings/#FLORIDyn.Floris","page":"Settings","title":"FLORIDyn.Floris","text":"Floris\n\nA mutable struct representing the settings for the FLORIDyn simulation. \n\nFields\n\nalpha::Float64: The alpha parameter for the FLORIS model.\nbeta::Float64: The beta parameter for the FLORIS model.\nk_a::Float64: The k_a parameter for the FLORIS model.\nk_b::Float64: The k_b parameter for the FLORIS model.\nk_fa::Float64: The k_fa parameter for the FLORIS model.\nk_fb::Float64: The k_fb parameter for the FLORIS model.\nk_fc::Float64: The k_fc parameter for the FLORIS model.\nk_fd::Float64: The k_fd parameter for the FLORIS model.\neta::Int: The eta parameter for the FLORIS model.\np_p::Float64: The p_p parameter for the FLORIS model.\nairDen::Float64: The air density for the FLORIS model.\nTIexp::Int: The turbulence intensity exponent for the FLORIS model.\nrotor_points::Union{Nothing, Int64}: Optional number of rotor points.\n\n\n\n\n\n","category":"type"},{"location":"settings/#FLORIDyn.FloriDyn","page":"Settings","title":"FLORIDyn.FloriDyn","text":"FloriDyn\n\nA structure representing the settings for the FLORIDyn simulation environment.\n\nFields\n\nn_op::Int: The number of operating points.\ndeltaUW::Float64: The delta U wind speed perturbation.\ndeltaDW::Float64: The delta D wind direction perturbation.\ndeltaCW::Float64: The delta C wind turbulence intensity perturbation.\ndynStateChange::String: The type of dynamic state change, e.g., \"Constant\", \"Interpolation\".\ntwf_model::String: The type of TWF (Turbine Wake Flow) model used, e.g., \"Gaussian\", \"FLORIDyn\".\n\n\n\n\n\n","category":"type"},{"location":"settings/#Settings","page":"Settings","title":"Settings","text":"","category":"section"},{"location":"settings/#FLORIDyn.setup","page":"Settings","title":"FLORIDyn.setup","text":"setup(filename)\n\nInitializes or configures the system using the provided filename. The filename should specify the path to a configuration or settings file required for setup.\n\nArguments\n\nfilename::String: Path to the .yaml file to be used for setup.\n\nReturns\n\nThe tuple (wind, sim, con) where:\nwind: An instance of the Wind struct containing wind-related parameters.\nsim: An instance of the Sim struct containing simulation parameters.\ncon: An instance of the Con struct containing controller parameters.\nfloris: An instance of the Floris struct containing FLORIS model parameters.\nfloridyn: An instance of the FloriDyn struct containing FLORIDyn model parameters.\n\n\n\n\n\n","category":"function"},{"location":"settings/#FLORIDyn.Settings","page":"Settings","title":"FLORIDyn.Settings","text":"Settings\n\nA struct that holds configuration parameters for the FLORIDyn simulation environment.\n\nFields\n\nvel_mode::VelModel: See: VelModel\ndir_mode::DirModel: See: DirModel\nturb_mode\nshear_mode\ncor_dir_mode\ncor_vel_mode\ncor_turb_mode\niterate_mode\ncontrol_mode\n\n\n\n\n\n","category":"type"},{"location":"settings/#FLORIDyn.Settings-Tuple{FLORIDyn.Wind, FLORIDyn.Sim, FLORIDyn.Con}","page":"Settings","title":"FLORIDyn.Settings","text":"Settings(wind::Wind, sim::Sim, con::Con)\n\nCreate and return a Settings object using the provided wind and sim parameters.\n\nArguments\n\nwind::Wind: An instance of the Wind struct containing wind-related parameters.\nsim::Sim: An instance of the Sim struct containing the simulation parameters.\ncon::Con: An instance of the Con struct containing the controller parameters.\n\nReturns\n\nA Settings struct configured with the given wind and simulation parameters.\n\nNotes\n\nThe function uses the str2type helper to convert string representations of model types  into their corresponding Julia types.\nThe Settings struct encapsulates the model settings for velocity, direction,  turbulence intensity, shear, and correction modes.\n\n\n\n\n\n","category":"method"},{"location":"settings/#FLORIDyn.turbineArrayProperties","page":"Settings","title":"FLORIDyn.turbineArrayProperties","text":"turbineArrayProperties(filepath::String)\n\nReads turbine array properties from the specified .yaml file.\n\nArguments\n\nfilepath::String: The path to the .yaml file containing turbine array data.\n\nReturns\n\nReturns the tuple (Pos, Type, Init_States) of the turbine array as read from the file.\n\nNotes\n\nReads a YAML file containing turbine configuration and returns a named tuple with fields Pos, Type, and Init_States, matching the structure of the original turbineArrayProperties() function.\n\n\n\n\n\n","category":"function"},{"location":"settings/#FLORIDyn.getTurbineData","page":"Settings","title":"FLORIDyn.getTurbineData","text":"getTurbineData(names::Vector{String}) -> NamedTuple\n\nRetrieve nacelle positions and rotor diameters for a given list of wind turbine types.\n\nArguments\n\nnames::Vector{String}: A vector of wind turbine type names. Supported types include:\n\"DTU 10MW\"\n\"DTU 5MW\"\n\"Senvion 6.2M\"\n\"V116\"\n\"V117\"\n\"V162\"\n\"GE Haliade X\"\n\nReturns\n\nA NamedTuple with the following fields:\nNacPos::Matrix{Float64}: An N × 3 matrix where each row corresponds to the (x, y, z) coordinates of the nacelle position for each turbine.\nD::Vector{Float64}: A vector of rotor diameters corresponding to each turbine.\n\nRaises\n\nArgumentError if an unknown or misspelled turbine name is encountered.\n\n\n\n\n\n","category":"function"},{"location":"#FLORIDyn","page":"Home","title":"FLORIDyn","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A dynamic wind farm simulation software, translated from https://github.com/TUDelft-DataDrivenControl/FLORIDyn_Matlab, which was written by Marcus Becker.","category":"page"},{"location":"","page":"Home","title":"Home","text":"His code uses one engineering model from the quasi static wind farm simulation software FLORIS, developed by NREL.","category":"page"},{"location":"#Model-features","page":"Home","title":"Model features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simulate wind farms dynamically at a low computational cost\nEstimate the power generated, added turbulence, and wake-induced losses.\nApply heterogeneous and time-varying wind speeds and directions\nTest different modeling approaches","category":"page"},{"location":"#Status:","page":"Home","title":"Status:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The basic example works.","category":"page"},{"location":"","page":"Home","title":"Home","text":"include(\"examples/main.jl\")","category":"page"},{"location":"#TODO:","page":"Home","title":"TODO:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"implement the visualization\nadd more unit tests\nimplement the missing functions","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Python version of FLORIDyn is available at https://github.com/TUDelft-DataDrivenControl/OFF .","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install Julia 1.10 or later, if you haven't already.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Before installing this software it is suggested to create a new project, for example like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mkdir test\ncd test\njulia --project=\".\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then add FLORIDyn from  Julia's package manager, by typing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"add https://github.com/ufechner7/FLORIDyn.jl\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"at the Julia prompt. You can run the unit tests with the command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg\"test FLORIDyn\"","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Citation of the FLORIDyn model: FLORIDyn - A dynamic and flexible framework for real-time wind farm control, M. Becker, D. Allaerts, J.W. van Wingerden, 2022, http://doi.org/10.1088/1742-6596/2265/3/032103","category":"page"},{"location":"","page":"Home","title":"Home","text":"Used FLORIS model: Experimental and theoretical study of wind turbine wakes in yawed conditions, M. Bastankhah, F. Porté-Agel, 2020, http://doi.org/10.1017/jfm.2016.595","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additional references for smaller subcomponents can be found in the code or in the related publications.","category":"page"},{"location":"types/#Exported-Types","page":"Exported Types","title":"Exported Types","text":"","category":"section"},{"location":"types/#The-Wind-Farm-Simulation-struct","page":"Exported Types","title":"The Wind Farm Simulation struct","text":"","category":"section"},{"location":"types/#FLORIDyn.WindFarm","page":"Exported Types","title":"FLORIDyn.WindFarm","text":"WindFarm\n\nA mutable struct representing a wind farm. Fields can be specified using keyword arguments.\n\nFields\n\nnT::Int64: Number of turbines\nnOP::Int64: Number of operating points\nStates_WF::Matrix{Float64}: States of the wind farm\nStates_OP::Matrix{Float64}: States of the operating points\nStates_T::Matrix{Float64}: States of the turbines\nposBase::Matrix{Float64}: Base positions of the turbines\nposNac::Matrix{Float64}: Positions of the nacelles\nD::Vector{Float64}: Diameters of the turbines\nStartI::Matrix{Int}: Start indices for each turbine\nintOPs::Vector{Matrix{Float64}}: Interpolated operating points\nWeight::Vector{Vector{Float64}}: Weights for the operating points\ndep::Vector{Vector{Int}}: Dependencies between turbines\nred_arr::Matrix{Float64}: Reduced array for each turbine\nNames_T::Vector{String}: Names of the states of the turbines\nNames_WF::Vector{String}: Names of the states of the wind farm\nNames_OP::Vector{String}: Names of coordinates the operating points   \n\n\n\n\n\n","category":"type"},{"location":"types/#Markers-defining-the-wind-velocity-model","page":"Exported Types","title":"Markers defining the wind velocity model","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"An instance of these structs needs to be passed to the functions that calculate the wind velocity. They are all subtypes of VelModel","category":"page"},{"location":"types/#FLORIDyn.Velocity_Constant","page":"Exported Types","title":"FLORIDyn.Velocity_Constant","text":"Velocity_Constant <: VelModel\n\nA velocity model representing a constant wind velocity field. This struct is used as a type marker  to indicate that the wind velocity does not vary in space or time.\n\nSee also:\n\nVelModel: Abstract supertype for velocity models.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Velocity_Constant_wErrorCov","page":"Exported Types","title":"FLORIDyn.Velocity_Constant_wErrorCov","text":"Velocity_Constant_wErrorCov\n\nA velocity model representing a constant wind field with associated  error covariance. This struct is a subtype of VelModel and is used  to model wind velocity with an constant value and an error covariance  for uncertainty quantification.\n\nSee also:\n\nVelModel: Abstract supertype for velocity models.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Velocity_EnKF_InterpTurbine","page":"Exported Types","title":"FLORIDyn.Velocity_EnKF_InterpTurbine","text":"Velocity_EnKF_InterpTurbine\n\nA velocity model type representing an interpolated turbine velocity field using the  Ensemble Kalman Filter (EnKF) approach.\n\nDescription\n\nThis struct is used within the wind field modeling framework to represent the velocity at a turbine location,  where the velocity is estimated or interpolated using EnKF-based techniques.\n\nSee also:\n\nVelModel: Abstract supertype for velocity models.\n\n\n\n\n\n","category":"type"},{"location":"types/#Markers-defining-the-wind-direction-model","page":"Exported Types","title":"Markers defining the wind direction model","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"An instance of these structs needs to be passed to the functions that calculate the wind direction. They are all subtypes of DirModel","category":"page"},{"location":"types/#FLORIDyn.Direction_Constant","page":"Exported Types","title":"FLORIDyn.Direction_Constant","text":"Direction_Constant <: DirModel\n\nA marker struct used to represent a constant wind direction.\n\nExample:\n\ndir_mode = Direction_constant()\nphi = getWindDirT(dir_mode, 270, [1,2,3], nothing)\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_Constant_wErrorCov","page":"Exported Types","title":"FLORIDyn.Direction_Constant_wErrorCov","text":"Direction_Constant_wErrorCov <: DirModel\n\nA marker struct used to indicate a wind direction that is constant with associated error covariance.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_EnKF_InterpTurbine","page":"Exported Types","title":"FLORIDyn.Direction_EnKF_InterpTurbine","text":"Direction_EnKF_InterpTurbine <: DirModel\n\nA marker struct used to indicate the use of direction-aware Ensemble Kalman Filter (EnKF) interpolation for turbine modeling.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_Interpolation","page":"Exported Types","title":"FLORIDyn.Direction_Interpolation","text":"Direction_Interpolation <: DirModel\n\nA marker struct used to represent direction interpolation functionality within the FLORIDyn framework.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_Interpolation_wErrorCov","page":"Exported Types","title":"FLORIDyn.Direction_Interpolation_wErrorCov","text":"Direction_Interpolation_wErrorCov <: DirModel\n\nA marker struct representing a direction interpolation method with associated error covariance.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_InterpTurbine","page":"Exported Types","title":"FLORIDyn.Direction_InterpTurbine","text":"Direction_InterpTurbine <: DirModel\n\nA marker struct used to indicate direction interpolation for turbines.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_InterpTurbine_wErrorCov","page":"Exported Types","title":"FLORIDyn.Direction_InterpTurbine_wErrorCov","text":"Direction_InterpTurbine_wErrorCov <: DirModel\n\nA marker struct used to indicate the use of direction interpolation for turbines with associated error covariance.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_RW_with_Mean","page":"Exported Types","title":"FLORIDyn.Direction_RW_with_Mean","text":"Direction_RW_with_Mean <: DirModel\n\nA marker struct used to indicate the use of a random walk direction model with a mean component.\n\n\n\n\n\n","category":"type"},{"location":"types/#Markers-for-defining-the-wind-shear","page":"Exported Types","title":"Markers for defining the wind shear","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"An instance of these structs needs to be passed to the functions that calculate the wind shear.","category":"page"},{"location":"types/#FLORIDyn.Shear_Interpolation","page":"Exported Types","title":"FLORIDyn.Shear_Interpolation","text":"Shear_Interpolation\n\nA marker struct used to represent the linear interpolation for wind shear profiles.\n\nSee also\n\nShear_PowerLaw\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Shear_PowerLaw","page":"Exported Types","title":"FLORIDyn.Shear_PowerLaw","text":"Shear_PowerLaw\n\nA marker struct representing the logarithmic law for modeling wind shear profiles.\n\nSee also\n\nShear_Interpolation\n\n\n\n\n\n","category":"type"},{"location":"types/#Markers-for-defining-the-wind-turbulence","page":"Exported Types","title":"Markers for defining the wind turbulence","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"An instance of these structs needs to be passed to the functions that calculate the wind turbulence.","category":"page"},{"location":"types/#FLORIDyn.TI_Constant","page":"Exported Types","title":"FLORIDyn.TI_Constant","text":"TI_Constant <: TurbulenceModel\n\nA marker struct representing a constant turbulence intensity. \n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.TI_EnKF_InterpTurbine","page":"Exported Types","title":"FLORIDyn.TI_EnKF_InterpTurbine","text":"TI_EnKF_InterpTurbine <: TurbulenceModel\n\nA marker struct representing the Turbulence Intensity (TI) Ensemble Kalman Filter (EnKF) interpolation model.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.TI_Interpolation","page":"Exported Types","title":"FLORIDyn.TI_Interpolation","text":"TI_Interpolation <: TurbulenceModel\n\nA marker struct representing the interpolation method for modeling the turbulence.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.TI_InterpTurbine","page":"Exported Types","title":"FLORIDyn.TI_InterpTurbine","text":"TI_InterpTurbine <: TurbulenceModel\n\nA marker struct representing an interpolated turbine model for turbulence intensity calculations.\n\n\n\n\n\n","category":"type"},{"location":"types/#Markers-defining-the-controller","page":"Exported Types","title":"Markers defining the controller","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"An instance of these structs needs to be passed to the functions that control turbine behavior. They are all subtypes of ControllerModel","category":"page"},{"location":"types/#FLORIDyn.Yaw_Constant","page":"Exported Types","title":"FLORIDyn.Yaw_Constant","text":"Yaw_Constant <: ControllerModel\n\nA marker struct used to represent a constant yaw control strategy. In this mode, turbines maintain a fixed yaw angle throughout the simulation.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Yaw_InterpTurbine","page":"Exported Types","title":"FLORIDyn.Yaw_InterpTurbine","text":"Yaw_InterpTurbine <: ControllerModel\n\nA marker struct used to indicate yaw control with turbine interpolation. This mode allows for interpolated yaw angles across different turbine positions.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Yaw_SOWFA","page":"Exported Types","title":"FLORIDyn.Yaw_SOWFA","text":"Yaw_SOWFA <: ControllerModel\n\nA marker struct used to represent yaw control compatible with SOWFA (Simulator fOr Wind Farm Applications). This mode is specifically designed for integration with SOWFA simulation data.\n\n\n\n\n\n","category":"type"},{"location":"types/#Types-for-storing-wind-field-params","page":"Exported Types","title":"Types for storing wind field params","text":"","category":"section"},{"location":"types/#FLORIDyn.WindDirType","page":"Exported Types","title":"FLORIDyn.WindDirType","text":" WindDirType\n\nFields\n\nData::Float64: wind direction value\nCholSig::Matrix{Float64}: Cholesky factor of covariance matrix (nT x nT)\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.WindDirMatrix","page":"Exported Types","title":"FLORIDyn.WindDirMatrix","text":"struct WindDirMatrix\n\nFields\n\nData::Matrix{Float64}:    Columns [time, phi] or [time, phiT0, phiT1, ... phi_Tn]\nCholSig::Matrix{Float64}: Cholesky factor of covariance matrix (nT x nT)\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.WindDirTriple","page":"Exported Types","title":"FLORIDyn.WindDirTriple","text":"WindDirTriple\n\nA structure representing a wind direction triple. \n\nFields\n\nInit::Vector{Float64}:    Mean direction (vector or scalar)\nCholSig::Matrix{Float64}: Cholesky factor of covariance matrix (nT x nT)\nMeanPull::Float64:        Scalar mean reversion factor\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.WindVelType","page":"Exported Types","title":"FLORIDyn.WindVelType","text":" WindVelType\n\nFields\n\nData::Float64: wind speed\nCholSig::Matrix{Float64}: Cholesky factor of covariance matrix (nT x nT)\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.WindVelMatrix","page":"Exported Types","title":"FLORIDyn.WindVelMatrix","text":"struct WindVelMatrix\n\nFields\n\nData::Matrix{Float64}:    Nx2 matrix: column 1 = time, column 2 = wind speed\nCholSig::Matrix{Float64}: Cholesky factor of covariance matrix (nT x nT)\n\n\n\n\n\n","category":"type"}]
}
