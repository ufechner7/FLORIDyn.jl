var documenterSearchIndex = {"docs":
[{"location":"functions/#Exported-Functions","page":"Exported Functions","title":"Exported Functions","text":"","category":"section"},{"location":"functions/#Defining-the-wind-directions","page":"Exported Functions","title":"Defining the wind directions","text":"","category":"section"},{"location":"functions/#FLORIDyn.getWindDirT","page":"Exported Functions","title":"FLORIDyn.getWindDirT","text":"getWindDirT(::Direction_Constant, WindDir, iT, _)\n\nReturn wind direction in SOWFA-degrees for the requested turbine(s).\n\nArguments\n\nWindDir: The wind direction (scalar).\niT: Index or indices of the turbines (can be an integer or array).\n_: Placeholder for unused argument.\n\nReturns\n\nphi: Array of wind direction values, same size as iT.\n\n\n\n\n\ngetWindDirT(::Direction_Constant_wErrorCov, WindDir, iT)\n\nReturn wind direction in SOWFA-deg for the requested turbine(s).\n\nArguments\n\nWindDir: Struct with fields\nData::Float64: wind direction value\nCholSig::AbstractMatrix: Cholesky factor of covariance matrix (nT x nT)\niT: Vector of turbine indices (can be any indexable collection)\n\nReturns\n\nphi: Vector of wind directions for the selected turbines, including random perturbation\n\n\n\n\n\ngetWindDirT(::Direction_Interpolation, WindDir, iT, t)\n\nDirection_Interpolation\n\nReturns the wind direction at the respective turbine(s). Uniform interpolation version - all turbines experience the same changes.\n\nArguments:\n\nWindDir: Nx2 Array, columns are time and phi (wind direction)\niT: single value or array with turbine index/indices\nt: time of request\n\nReturns:\n\nphi: Array of wind directions for each turbine in iT\n\n\n\n\n\ngetWindDirT(::Direction_Interpolation_wErrorCov, WindDir, iT, t)\n\nReturns the wind direction at the respective turbine(s). Uniform interpolation version - all turbines experience the same changes.\n\nArguments:\n\nWindDir.Data   = (t,phi) pairs between which is linearly interpolated\nWindDir.ColSig = nT x nT, col(Covariance Matrix)\niT: single value or array with turbine index/indices\nt: time of request\n\nReturns:\n\nphi: Array of wind directions for each turbine in iT\n\n\n\n\n\ngetWindDirT(::Direction_InterpTurbine, WindDir, iT, t)\n\nReturn wind direction in SOWFA-degrees for the requested turbine(s).\n\nArguments\n\nWindDir::Matrix{Float64}: Each row is [time, phi_T0, phi_T1, ...].\niT::Union{Int, AbstractVector{Int}}: Index or indices of turbines (1-based).\nt::Float64: Time of request.\n\nReturns\n\nphi::Vector{Float64}: Wind direction(s) for the selected turbine(s) at time t.\n\n\n\n\n\ngetWindDirT(::Direction_InterpTurbine_wErrorCov, WindDir, iT, t)\n\nReturn wind direction in SOWFA-deg for the requested turbine(s).\n\nArguments\n\nWindDir: A struct with fields:\nData (Matrix): Each row is [time, phiT0, phiT1, ... phi_Tn]\nCholSig (Matrix): Cholesky factor of the covariance matrix\niT: Index or indices of the turbines (can be integer or array)\nt: Time of request (Float64)\n\nReturns\n\nphi: Wind direction(s) for requested turbine(s), perturbed with noise.\n\n\n\n\n\ngetWindDirT(::Direction_RW_with_Mean, WindDirNow, WindDir)\n\nReturns the wind direction at the respective turbine(s).\n\nArguments\n\nWindDirNow: Current value (vector)\nWindDir: Struct with fields:\nInit: Mean direction (vector or scalar)\nCholSig: Cholesky factor of covariance matrix (matrix)\nMeanPull: Scalar mean reversion factor\n\nReturns\n\nphi: Updated wind direction(s) (vector)\n\n\n\n\n\n","category":"function"},{"location":"functions/#FLORIDyn.getWindDirT_EnKF","page":"Exported Functions","title":"FLORIDyn.getWindDirT_EnKF","text":"getWindDirT_EnKF(::Direction_EnKF_InterpTurbine, WindDir, iT, t)\n\nDirectionEnKFInterpTurbine\n\nReturn wind direction in SOWFA-deg for the requested turbine(s).\n\nArguments\n\nWindDir::AbstractMatrix: Matrix where each row is [time, phiT0, phiT1, ... phi_Tn]\niT: Index or indices of the turbines (can be integer or vector)\nt: Time of request (scalar)\n\nReturns\n\nphi: Wind direction(s) at time t for turbine(s) iT\n\n\n\n\n\n","category":"function"},{"location":"functions/#Defining-the-wind-shear","page":"Exported Functions","title":"Defining the wind shear","text":"","category":"section"},{"location":"functions/#FLORIDyn.getWindShearT","page":"Exported Functions","title":"FLORIDyn.getWindShearT","text":"getWindShearT(::Shear_Interpolation, WindShear, z)\n\nCompute the wind shear at a given height z using the specified WindShear model.\n\nArguments\n\nWindShear: An object or parameter set describing the wind shear profile.\nz: The height (in meters) at which to evaluate the wind shear.\n\nReturns\n\nThe wind shear value at height z.\n\nREMARKS\n\nExpects a .csv file called \"WindShearProfile.csv\" with a normalized wind speed profile for different heights:\n\nz, (u_z/u0)\nz, (u_z/u0)\nz, (u_z/u0)\n\nThere is a linear interpolation between every pair. In case z is out of bounds the function will use the closest available setpoint.\n\n\n\n\n\n","category":"function"},{"location":"#FLORIDyn","page":"Home","title":"FLORIDyn","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A dynamic wind farm simulation software, translated from https://github.com/TUDelft-DataDrivenControl/FLORIDyn_Matlab, which was written by Marcus Becker.","category":"page"},{"location":"","page":"Home","title":"Home","text":"His code uses one engineering model from the quasi static wind farm simulation software FLORIS, developed by NREL.","category":"page"},{"location":"#Status:-WORK-IN-PROGRESS","page":"Home","title":"Status: WORK-IN-PROGRESS","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You cannot use this package yet, if you need a version of FLORIDyn that works now, use the Matlab or Python version instead. The Python version is available at https://github.com/TUDelft-DataDrivenControl/OFF .","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install Julia 1.10 or later, if you haven't already.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Before installing this software it is suggested to create a new project, for example like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mkdir test\ncd test\njulia --project=\".\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then add FLORIDyn from  Julia's package manager, by typing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"add https://github.com/ufechner7/FLORIDyn.jl\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"at the Julia prompt. You can run the unit tests with the command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg\"test FLORIDyn\"","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Citation of the FLORIDyn model: FLORIDyn - A dynamic and flexible framework for real-time wind farm control, M. Becker, D. Allaerts, J.W. van Wingerden, 2022, http://doi.org/10.1088/1742-6596/2265/3/032103","category":"page"},{"location":"","page":"Home","title":"Home","text":"Used FLORIS model: Experimental and theoretical study of wind turbine wakes in yawed conditions, M. Bastankhah, F. Port√©-Agel, 2020, http://doi.org/10.1017/jfm.2016.595","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additional references for smaller subcomponents can be found in the code or in the related publications.","category":"page"},{"location":"types/#Exported-Types","page":"Exported Types","title":"Exported Types","text":"","category":"section"},{"location":"types/#Markers-for-defining-the-wind-direction","page":"Exported Types","title":"Markers for defining the wind direction","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"An instance of these structs needs to be passed to the functions that calculate the wind direction.","category":"page"},{"location":"types/#FLORIDyn.Direction_Constant","page":"Exported Types","title":"FLORIDyn.Direction_Constant","text":"Direction_Constant\n\nA marker struct used to represent a constant wind direction.\n\nExample:\n\ndir_mode = Direction_constant()\nphi = getWindDirT(dir_mode, 270, [1,2,3], nothing)\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_Constant_wErrorCov","page":"Exported Types","title":"FLORIDyn.Direction_Constant_wErrorCov","text":"Direction_Constant_wErrorCov\n\nA marker struct used to indicate a wind direction that is constant with associated error covariance.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_EnKF_InterpTurbine","page":"Exported Types","title":"FLORIDyn.Direction_EnKF_InterpTurbine","text":"Direction_EnKF_InterpTurbine\n\nA marker struct used to indicate the use of direction-aware Ensemble Kalman Filter (EnKF) interpolation for turbine modeling.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_Interpolation","page":"Exported Types","title":"FLORIDyn.Direction_Interpolation","text":"Direction_Interpolation\n\nA marker struct used to represent direction interpolation functionality within the FLORIDyn framework.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_Interpolation_wErrorCov","page":"Exported Types","title":"FLORIDyn.Direction_Interpolation_wErrorCov","text":"Direction_Interpolation_wErrorCov\n\nA marker struct representing a direction interpolation method with associated error covariance.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_InterpTurbine","page":"Exported Types","title":"FLORIDyn.Direction_InterpTurbine","text":"Direction_InterpTurbine\n\nA marker struct used to indicate direction interpolation for turbines.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_InterpTurbine_wErrorCov","page":"Exported Types","title":"FLORIDyn.Direction_InterpTurbine_wErrorCov","text":"Direction_InterpTurbine_wErrorCov\n\nA marker struct used to indicate the use of direction interpolation for turbines with associated error covariance.\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Direction_RW_with_Mean","page":"Exported Types","title":"FLORIDyn.Direction_RW_with_Mean","text":"Direction_RW_with_Mean\n\nA marker struct used to indicate the use of a random walk direction model with a mean component.\n\n\n\n\n\n","category":"type"},{"location":"types/#Markers-for-defining-the-wind-shear","page":"Exported Types","title":"Markers for defining the wind shear","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"An instance of these structs needs to be passed to the functions that calculate the wind shear.","category":"page"},{"location":"types/#FLORIDyn.Shear_Interpolation","page":"Exported Types","title":"FLORIDyn.Shear_Interpolation","text":"Shear_Interpolation\n\nA marker struct used to represent the linear interpolation for wind shear profiles.\n\nSee also\n\nShear_LogLaw\nShear_PowerLaw\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Shear_LogLaw","page":"Exported Types","title":"FLORIDyn.Shear_LogLaw","text":"Shear_LogLaw\n\nA type representing the logarithmic law for modeling wind shear profiles.\n\nSee also\n\nShear_Interpolation\nShear_PowerLaw\n\n\n\n\n\n","category":"type"},{"location":"types/#FLORIDyn.Shear_PowerLaw","page":"Exported Types","title":"FLORIDyn.Shear_PowerLaw","text":"Shear_PowerLaw\n\nA type representing the logarithmic law for modeling wind shear profiles.\n\nSee also\n\nShear_LogLaw\nShear_Interpolation\n\n\n\n\n\n","category":"type"}]
}
